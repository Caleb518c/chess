// const generateMove = (): string => {
  //   let bestMove = "";
  //   let currentEval = evaluate(currentPosition.fen(), false);

  //   const legalMoves: string[] = currentPosition.moves();

  //   for (let i = 0; i < legalMoves.length; i++) {
  //     // This has to be done so that the currentPosition object is not modified
  //     // THIS IS VERY IMORTANT
  //     // REMEMBER TO DO THIS EVERYTIME!!!
  //     let futurePosition = new Chess(currentPosition.fen());

  //     // Stops the function from returning a move if it is white to move,
  //     // preventing the engine from moving for the player
  //     if (/w/.test(futurePosition.fen())) {
  //       return "";
  //     }

  //     futurePosition.move(legalMoves[i]);

  //     if (evaluate(futurePosition.fen(), false) > currentEval) {
  //       currentEval = evaluate(futurePosition.fen(), false);
  //       bestMove = legalMoves[i];
  //     }
  //   }

  //   // Makes the engine choose a random move in the case that all moves are equal
  //   if (bestMove === "") {
  //     const randomIndex = Math.floor(Math.random() * legalMoves.length);
  //     return legalMoves[randomIndex];
  //   } else {
  //     return bestMove;
  //   }
  // };




  const minimax = (
    position: Chess,
    depth: number,
    maximizingPlayer: boolean
  ): number => {
    console.log("Entered minimax");
    console.log("Depth: " + depth);

    // Quits the search and returns the best eval if either:
    // 1. The game is over (checkmate, or draw)
    // 2. We hit the end of the specified depth
    if (depth === 0 || position.gameOver()) {
      return evaluate(position.fen());
    }

    // If it is white to move
    if (maximizingPlayer) {
      let maxScore: number = Number.MIN_SAFE_INTEGER;
      for (const move of position.moves()) {
        // Creates a copy of the current position and makes the current move
        let childPosition: Chess = new Chess(position.fen());
        childPosition.move(move);
        // Runs minimax on the child position to find the score
        let score: number = minimax(childPosition, depth - 1, false);
        maxScore = Math.max(maxScore, score);
      }
    } else {
      let minScore: number = Number.MAX_SAFE_INTEGER;
      for (const move of position.moves()) {
        // Creates a copy of the current position and makes the current move
        let childPosition: Chess = new Chess(position.fen());
        childPosition.move(move);
        // Runs minimax on the child position to find the score
        let score: number = minimax(childPosition, depth - 1, true);
        minScore = Math.min(minScore, score);
      }
    }
    console.error(
      "Something has gone horribly wrong and the top case of recursion was never hit"
    );
    return -1;
  };